@using Constants

@inject IJSRuntime js

<div class="player-control-panel">
    <div class="image-panel ">
        <img class="img-fluid active-melody" src="https://th.bing.com/th/id/R.bc2e7e3c4287ceb88e45002237d8050d?rik=gPwOCgxYSFCFfw&pid=ImgRaw&r=0" />
    </div>
    <div class="controls">
        <div class="info">
        <p class="melody-title">Very big name for my own melody</p>
        <p class="author-name">author</p>
        </div>

        <div class="media-bar progress-bar">
            <div class="media-bar fill-bar">
            </div>
        </div>

        <div class="time-table">
            <span id="current-time-span">0:00</span>
            <span id="target-time-span">3:20</span>
        </div>

        <div class="melody-control">
            <button class="my-audio-control-button" @onclick="prevSong">
                <img src="/img/prev.png" />
            </button>

            <button class="my-audio-control-button" @onclick="pausePlay">
                <img id="state-pic" src="/img/play.png" />
            </button>

            <button class="my-audio-control-button" @onclick="nextSong">
                <img src="/img/next.png" />
            </button>
        </div>
    </div>
</div>

<style>
    .player-control-panel {
        padding-block: 0px;
        padding-inline: 20%;
        flex-basis: 10vh;
        display: flex;
        flex-direction: row;
        justify-content: center;
        background-color: floralwhite;
        opacity: 60%;
        border-radius: 10px 10px 0px 0px;
    }
    .image-panel{
        flex-basis: 24%;
        display: flex;
        justify-content: center;
        align-content: center
    }
    .controls{
        flex: 1 1 auto;
        display: flex;
        flex-direction: column;
    }

    .info {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .melody-title {
        margin-left: 10%;
    }

    .author-name {
        margin-left: 20%;
        font-style: italic;
    }

    .media-bar {
        height: 8px;
        border-radius: 4px;
    }

    .progress-bar {
        background-color: dimgray;
        margin: 2%;
    }

    .fill-bar {
        position: absolute;
        width: 0%;
        background-color: yellow;  
    }

    .time-table {
        display: flex;
        justify-content: space-between;
        padding-inline: 20px;
    }

    .melody-control{
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        padding-inline: 20%;
    }

    .my-audio-control-button {
        border: 0;
        background-color: inherit;
    }

</style>

@code {
    private void nextSong()
    {
        var id = CurrentPlaylist.NextMelody;

        js.InvokeVoidAsync("playMelody", [TunnelUrlData.Url, id]);

        CurrentPlaylist.CurrentMelody = id;
    }
    private void prevSong()
    {
        var id = CurrentPlaylist.PrevMelody;

        js.InvokeVoidAsync("playMelody", [TunnelUrlData.Url, id]);

        CurrentPlaylist.CurrentMelody = id;
    }
    private void pausePlay()
    {
        js.InvokeVoidAsync("changeState");
    }
}