@using Constants

@inject IJSRuntime js

<div class="player-control-panel">
    <div class="image-panel ">
        <img class="img-fluid active-melody" src="/img/placeholder.jpg" />
    </div>
    <div class="controls">
        <div class="info">
            <p class="info melody-title">Title</p>
            <p class="info author-name">Author</p>
        </div>
      
        <div class="media-bar progress-bar" id="progress-bar">
            <div class="media-bar fill-bar">
            </div>
        </div>

        <div class="melody-control">
            <span id="current-time-span">00:00</span>

            <button class="my-audio-control-button" @onclick="prevSong">
                <img src="/img/prev.png" />
            </button>

            <button class="my-audio-control-button" @onclick="pausePlay">
                <img id="state-pic" src="/img/pause.png" />
            </button>

            <button class="my-audio-control-button" @onclick="nextSong">
                <img src="/img/next.png" />
            </button>

            <span id="target-time-span">00:00</span>
        </div>
    </div>
</div>

<style type="text/css">
    .player-control-panel {
        visibility: hidden;
        position: fixed;
        bottom:0px;
        left: 20%;
        width: 60%;
        align-self: center;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        background-color: silver;
        opacity: 60%;
        border-radius: 10px 10px 0px 0px;
    }

    
    .image-panel{
        flex-basis: 14%;
        padding: 8px;
        border-radius: 10px;
        display: flex;
        justify-content: center;
        align-self: stretch;
    }
    .img-fluid{
        border-radius: 10px;
    }
    .img-panel{
        border-radius: 10px;
    }
    .controls{
        flex: 1 1 auto;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .info {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        margin-block: 2px;
    }

    .melody-title {
        margin-left: 10%;
    }

    .author-name {
        margin-left: 20%;
        font-style: italic;
    }

    .media-bar {
        height: 8px;
        border-radius: 4px;
    }

    .progress-bar {
        background-color: dimgray;
        margin-inline: 2%;
        margin-block: 2px;
        cursor: pointer;
    }

    .fill-bar {
        position: revert;
        width: 0%;
        max-width: inherit;
        background-image: linear-gradient(to left, blue, pink );
    }

    .melody-control{
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        padding-inline: 10%;
    }

    .my-audio-control-button {
        border: 0;
        background-color: inherit;
    }
  
    @@media screen and (max-width: 960px) {
        .player-control-panel {
            left: 10%;
            width: 80%;
        }

        .image-panel {
            flex-basis: 16%;
        }
    }

    @@media screen and (max-width: 620px) {

        .player-control-panel {
            left: 0%;
            width: 100%;
        }

        .image-panel {
            display: none;
        }
    }

</style>

@code {
    private void nextSong()
    {
        var id = CurrentPlaylist.NextMelody;

        js.InvokeVoidAsync("playMelody", [TunnelUrlData.Url, id]);

        CurrentPlaylist.CurrentMelody = id;
    }
    private void prevSong()
    {
        var id = CurrentPlaylist.PrevMelody;

        js.InvokeVoidAsync("playMelody", [TunnelUrlData.Url, id]);

        CurrentPlaylist.CurrentMelody = id;
    }
    private void pausePlay()
    {
        js.InvokeVoidAsync("changeState");
    }
}