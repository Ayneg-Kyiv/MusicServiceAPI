@inherits LayoutComponentBase
@using Constants
@using Services;
@inject NavigationManager Navigation
@inject IAuthorization AuthorizationService
@inject IJSRuntime js



<div class="wrapper">
    <div class="top-header">
         <div  class="login-menu">
@if (AuthorizationService.IsUserLoggedIn())
{
        <div class="my-nav-item">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <img class="nav-link-img" src="/img/main.png" />
                <h2>Welcome, @AuthorizationService.GetEmailUser() </h2>
            </NavLink>
            <button class="logout-button" @onclick="LogoutUser">Logout</button>
        </div>
}
else
{
        <h1>Please log in or register to access the content.</h1>
        <NavLink class="btn btn-primary" href="/logins">Log In</NavLink>

}
         </div>
         <NavMenu />
         <div class="choice-genre">
            <div class="genre-button" @onclick="ToggleGenreMenu">Genres</div>


            <div class="genre-menu" style="@(isGenreMenuVisible ? "display:block;" : "display:none;")">
                <ul>
                    <li>Rock</li>
                    <li>Pop</li>
                    <li>Jazz</li>
                    <li>Classical</li>

                </ul>
            </div>
         </div>
    </div>

    <div class ="main-content">
         @Body
    </div>
 
    <MediaPlayer />
</div>

<style>

    .choice-genre{
        flex-basis: 20%;
       
    }

    .wrapper{
        width: 100%;
        height: 100vh;
        min-height: 100vh;
        margin: auto;
        height: auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: center;
    }

    .top-header{
        flex-basis: 6vh;
        display: flex;
        position: fixed;
        top: 0px;
        left: 0px;
        width: 100vw;
        flex-direction: row;
        align-items: stretch;
        background-color: darkslategray;
        border-radius: 0px 0px 10px 10px;
        z-index: 1;
    }

    .main-content {
        flex: 1 1 auto;
        display: flex;
    }

    .filler{
        flex-basis: 20%;
    }

    .genre-button {
        position: absolute;
        background-color: #007bff;
        color: white;
        padding: 10px 15px; 
        border-radius: 20px;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s ease;
        font-size: 0.9rem; 
    }

        .genre-button:hover {
            background-color: #0056b3;
        }


    .genre-menu {
        position: absolute;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        padding: 10px;
        z-index: 1000;
        top: 40px; 
    }


        .genre-menu ul {
            list-style: none;
            margin: 0;
            padding: 0;
        }

            .genre-menu ul li {
                padding: 10px;
                cursor: pointer;
                transition: background-color 0.3s ease;
            }

                .genre-menu ul li:hover {
                    background-color: #f1f1f1;
                }

   .login-button {
        background-color: #28a745; 
        color: white;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s ease;
        margin-right: 10px; 
        align-self: flex-start; 
    }

    .logout-button {
    background-color: #dc3545; 
    color: white;
    padding: 8px 12px;
    border-radius: 5px;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    transition: background-color 0.3s ease;
}

.logout-button:hover {
    background-color: #c82333; 
}



    
</style>

@code {
    private bool isGenreMenuVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await js.InvokeVoidAsync("onLoadAudio");
    }
    private void ToggleGenreMenu()
    {
        isGenreMenuVisible = !isGenreMenuVisible;
    }

    private void NavigateToLogin(){
        Navigation.NavigateTo("/logins");
    }

    public void LogoutUser()
    {
        AuthorizationService.LogOut();
        Navigation.NavigateTo("/");
    }

}