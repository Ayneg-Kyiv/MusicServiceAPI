@inherits LayoutComponentBase

@using Constants
@using MusicServiceMauiClient.DTOs.GenreDTOs
@using MusicServiceMauiClient.Services

@inject IGenre genre
@inject IJSRuntime js


<div class="wrapper">
    <div class="top-header">
         <div class="filler">

         </div>
         <NavMenu />
         <div class="choice-genre">
            <div class="genre-button" @onclick="ToggleGenreMenu"><div>Genres</div></div>
            <div class="genre-menu" style="@(isGenreMenuVisible ? "display:block;" : "display:none;")">
                <ul>
                    <li id="0" @onclick="@(() => OnSelectedGenreChanged(Guid.Empty))">Any</li>
                    @if(genres != null)
                    @foreach(var genre in genres)
                    {
                        <li id="@genre.Id" @onclick="@(() => OnSelectedGenreChanged(genre.Id))">@genre.Name</li>
                    }
                </ul>
            </div>
         </div>
    </div>

    <div class ="main-content">
         @Body
    </div>
 
    <MediaPlayer />
</div>

<style>


    .wrapper{
        width: 100%;
        height: 100vh;
        min-height: 100vh;
        margin: auto;
        height: auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: center;
    }

    .top-header{
        flex-basis: 6vh;
        display: flex;
        position: fixed;
        top: 0px;
        left: 0px;
        width: 100vw;
        flex-direction: row;
        align-items: stretch;
        background-color: darkslategray;
        border-radius: 0px 0px 10px 10px;
        z-index: 1;
    }

    .main-content {
        flex: 1 1 auto;
        display: flex;
    }

    .filler{
        flex-basis: 20%;
    }

    .choice-genre {
        flex-basis: 20%;
    }

    .genre-button {
        position: absolute;
        display: flex;
        width: -webkit-fill-available;
        height: -webkit-fill-available;
        justify-content: center;
        background-color: #007bff;
        margin-inline: 8px;
        margin-block: 8px;
        color: white;
        border-radius: 20px;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s ease;
    }
        
        .genre-button > div {
            justify-self: center;
            align-self: center;
            color: rgba(0, 0, 255, 0.8);
            font-size: large;
        }

        .genre-button:hover {
            background-color: #0056b3;
        }


    .genre-menu {
        position: absolute;
        width: -webkit-fill-available;
        padding-inline: 5px;
        margin-inline: 8px;
        text-align: center;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        padding: 10px;
        z-index: 1000;
        top: 6vh; 
    }


        .genre-menu ul {
            list-style: none;
            margin: 0;
            padding: 0;
        }

            .genre-menu ul li {
                padding: 10px;
                text-align: center;
                cursor: pointer;
                transition: background-color 0.3s ease;
            }

                .genre-menu ul li:hover {
                    background-color: #f1f1f1;
                }
</style>

@code {
    private bool isGenreMenuVisible = false;

    private IEnumerable<GetGenreDTO>? genres;

    public static GetGenreDTO? selectedGenre;

    protected override async Task OnInitializedAsync()
    {
        await js.InvokeVoidAsync("onLoadAudio");
        genres = await genre.GetGenresAsync();
    }

    private void ToggleGenreMenu()
    {
        isGenreMenuVisible = !isGenreMenuVisible;
    }

    private void OnSelectedGenreChanged (Guid id)
    {
        selectedGenre = genres?.Where(g => g.Id == id).SingleOrDefault();
        StateHasChanged();
    }
}