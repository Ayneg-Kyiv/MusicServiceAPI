@using MusicServiceMauiClient.DTOs.AuthorDTOs;
@using MusicServiceMauiClient.DTOs.MelodyDTOs
@using Constants;
@using Services;
@using Models;

@inject IAuthorization authorizationService
@inject NavigationManager Navigation
@inject IAuthor author
@inject IJSRuntime js
@inject IMusic music

<div class="my-container">

    <div class="authors-list">
       
      <NavLink class="nav-link add-button" href="./add-author" Match="NavLinkMatch.All">Add author</NavLink>
 
        <ul>
            @if (authors != null)
            {
                @foreach (var author in authors)
                {
                    <li @onclick="() => SelectAuthor(author.Melodies!)" class="author-item">
                        <img src="@author.ImageUrl" alt="^_^" />
                        <div class="action-group">
                            <h4>@author.Name</h4>
                            <button value="@author.Id" id="deleteButton" @onclick="(() => DeleteAuthor(author.Id))">Delete</button>
                        </div>
                    </li>
                }
            }
        </ul>
    </div>

    <div class="songs-list">
        @if (selectedAuthor != null)
        {
            <h4>@selectedAuthor.Name Melodies</h4>
            <div class="row">
                @if (selectedMelodies != null)
                {
                    @foreach (var melody in selectedMelodies)
                    {
                        <div class="col-md-2">
                            <div class="card">
                                <img class="card-img" src="@melody.ImageUrl" />
                                <h4>@melody.Title</h4>
                                <button value="@melody.Id" id="deleteButton" @onclick="(() => DeleteMelody(melody.Id))">Delete</button>
                            </div>
                        </div>
                    }
                    <div class="col-md-2">
                        <div class="card">
                            <a id="addButton" href="/add-melody">Add Melody</a>
                        </div>
                    </div>
                }
                else{
                    <div>Loading...</div>
                }
            </div>
        }
        else{
            <p>Please select an author to view their melodies.</p>
        }
    </div>

</div>

<style>

    .my-container {
        padding-top: 4%;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background-image: linear-gradient( rgba(0, 0, 255, 0.5), rgba(255, 192, 203, 0.5));
        width: 100%;
    }

    .authors-list {
        width: 30%;
        background-color: #ffcccb;
        padding: 5px;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid black;
        margin-left: 10px;
        margin-bottom: 10px;
    }

        .authors-list > ul {
            padding: 0px;
        }

    .songs-list {
        width: 65%;
        padding: 5px;
        border-radius: 5px;
        background-color: #add8e6;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid black;
        margin-right: 10px;
        margin-bottom: 10px;
        display: flex;
        flex-direction: column;
        background-image: linear-gradient( rgba(0, 0, 255, 0.5), rgba(255, 192, 203, 0.5));
        align-items: flex-start;
    }

    .author-item {
        display: flex;
        background-color: silver;
        flex-direction: row;
        border-radius: 20px;
        padding: 10px;
        height: 120px;
        cursor: pointer;
        justify-content: space-between;
        transition: background-color 0.3s ease;
        border-bottom: 1px solid #ddd;
        list-style-type: none;
        margin-top: 10px
    }

        .author-item > img {
            width: 100px;
            border-radius: 10px;
        }

        .author-item:hover {
            background-color: darkgrey;
        }

        .author-item.active {
            background-color: #ff69b4;
            color: white;
        }

    .songs-list ul {
        list-style-type: none;
        padding: 0;
    }

        .songs-list ul li {
            padding: 0px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

    .add-button{
        padding: 20px;
        background-color: mediumpurple;
        text-align: center;
        font-size: larger;
        border-radius: 20px;
        color: darkblue;
    }

    button, .deleteButton {
        background-color: #4caf50;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        button:hover {
            background-color: #45a049;
        }

        button:focus {
            outline: none;
        }

    .deleteButton{
        background-color: red;
    }

    .col-md-2 {
        flex: 1 1 auto;
    }

    .card {
        margin: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        overflow: hidden;
        text-align: center;
    }

    .card-img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    h2 {
        font-size: 1.2rem;
        margin: 10px 0;
    }

    .action-group{
        display:flex;
        flex-direction: column;
        width: 70%;
        justify-content: space-evenly;
    }

</style>

@code {

    private GetAuthorDTO? selectedAuthor;
    private IEnumerable<GetAuthorDTO>? authors;
    private IEnumerable<GetUnconnectedMelodyDTO>? melodies;
    private IEnumerable<GetUnconnectedMelodyDTO>? selectedMelodies;

    protected override async Task OnInitializedAsync()
    {
        authors = await author.GetAuthorsAsync();

        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                Select();
                StateHasChanged();
            });
        }, null, 0, 300);
    }

    private void SelectAuthor(IEnumerable<GetUnconnectedMelodyDTO> authorMelodies)
    {
        melodies = authorMelodies;

        selectedAuthor = authors?.FirstOrDefault(a => a.Melodies == authorMelodies);
    }

    private void Select()
    {
        if (Layout.MainLayout.selectedGenre != null)
            selectedMelodies = melodies?.Where(m => Layout.MainLayout.selectedGenre!.Melodies!
                                        .Any(g => g.Id == m.Id)).ToList();
        else
            selectedMelodies = melodies;
    }

    private async Task DeleteAuthor(Guid id) {
        var result = await author.DeleteAuthorAsync(id);

        if(result)
            Navigation.NavigateTo("/dashboard");
    }

    private async Task DeleteMelody(Guid id)
    {
        var result = await music.DeleteMelodyAsync(id);

        if (result)
            Navigation.NavigateTo("/dashboard");       
    }

    private string GetActiveClass(GetAuthorDTO author) =>
        selectedAuthor != null && selectedAuthor.Id == author.Id ? "active" : "";
}