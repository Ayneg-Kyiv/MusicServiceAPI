@implements IDisposable

@using MusicServiceMauiClient.DTOs.AuthorDTOs
@using MusicServiceMauiClient.DTOs.MelodyDTOs
@using Constants
@using Services
@using Models

@inject IAuthorization authorizationService
@inject NavigationManager Navigation
@inject IAuthor author
@inject IJSRuntime js
@inject IMusic music

<div class="my-container">

    <div class="authors-list">
       
      <NavLink class="nav-link add-button" href="./add-author" Match="NavLinkMatch.All">Add author</NavLink>
 
        <ul>
            @if (authors != null)
            {
                @foreach (var author in authors)
                {
                    <li @onclick="() => SelectAuthor(author)" class="author-item">
                        <img src="@author.ImageUrl" alt="^_^" />
                        <div class="action-group">
                            <h4>@author.Name</h4>
                            @if(author.Melodies?.Count() == 0)
                            {
                                <button value="@author.Id" id="deleteButton" @onclick="(() => DeleteAuthor(author.Id))">Delete</button>
                            }
                        </div>
                    </li>
                }
            }
        </ul>
    </div>

    <div class="songs-list">
        @if (selectedAuthor != null)
        {

            @if (selectedMelodies != null)
            {

                @foreach (var melody in selectedMelodies)
                {
                    <div class="music-item">
                        <div class="card">
                            <img class="card-img img-fluid" src="@melody.ImageUrl" />
                            <div>
                                <h2>@melody.Title</h2>
                            </div>
                            <a id="addButton" class="delete-button" href="/promote-to-genre/@melody.Id">Add Genre</a>
                            <button value="@melody.Id" id="deleteButton" class="delete-button" 
                            style="margin-top: 10px" @onclick="(() => DeleteMelody(melody.Id))">Delete</button>
                        </div>
                    </div>
                }

                <div class="music-item">
                    <div class="card">
                        <a id="addButton" class="add-button" style="border-radius: 0px;" 
                        href="/add-melody/@selectedAuthor.Id">Add Melody</a>
                    </div>
                </div>

            }
            else{ <div>Loading...</div> }

        }
        else{ <p>Please select an author to view their melodies.</p> }
    </div>

</div>

<style>

    .my-container {
        padding-top: 5%;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background-image: linear-gradient( rgba(0, 0, 255, 0.5), rgba(255, 192, 203, 0.5));
        width: 100%;
        height: 100%;
    }

    .authors-list {
        flex-basis: 30%;
        background-color: #ffcccb;
        padding: 5px;
        border-radius: 5px;
        padding-bottom: 9%;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid black;
        margin-left: 10px;
        margin-bottom: 10px;
        overflow-y: scroll;
    }

        .authors-list > ul {
            padding: 0px;
        }

    .songs-list {
        flex-basis: 68%;
        padding: 5px;
        border-radius: 5px;
        background-color: #ffcccb;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid black;
        margin-right: 10px;
        margin-bottom: 10px;
        padding-bottom: 9%;
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        background-image: linear-gradient( rgba(0, 0, 255, 0.5), rgba(255, 192, 203, 0.5));
        align-items: flex-start;
        overflow-y: scroll;
    }

    .music-item{
        width: 100%;
        padding-inline: 1%;
        padding-top: 10px;
        height: auto;
        text-overflow: ellipsis;
    }

    .author-item {
        display: flex;
        background-color: silver;
        flex-direction: row;
        border-radius: 20px;
        padding: 10px;
        height: 120px;
        cursor: pointer;
        justify-content: space-between;
        transition: background-color 0.3s ease;
        border-bottom: 1px solid #ddd;
        list-style-type: none;
        margin-top: 10px
    }

        .author-item > img {
            width: 100px;
            border-radius: 10px;
        }

        .author-item:hover {
            background-color: darkgrey;
        }

        .author-item.active {
            background-color: #ff69b4;
            color: white;
        }

    .songs-list ul {
        list-style-type: none;
        padding: 0;
    }

        .songs-list ul li {
            padding: 0px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

    .add-button{
        padding: 20px;
        background-color: mediumpurple;
        text-align: center;
        font-size: larger;
        border-radius: 20px;
        color: darkblue;
    }

    .delete-button {
        background-color: #4caf50;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .delete-button:hover {
            background-color: #45a049;
        }

        .delete-button:focus {
            outline: none;
        }

    .card {
        margin: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        overflow: hidden;
        text-align: center;
        flex: 1 1 auto;
    }

        .card > div {
            height: 60px;
            text-overflow: ellipsis;
        }

    .card-img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    h2 {
        font-size: 1.2rem;
        margin: 10px 0;
    }

    .action-group{
        display:flex;
        flex-direction: column;
        width: 70%;
        justify-content: space-evenly;
    }

</style>

@code {

    public GetAuthorDTO? selectedAuthor;
    private IEnumerable<GetAuthorDTO>? authors;

    private IEnumerable<GetUnconnectedMelodyDTO>? melodies;
    private IEnumerable<GetUnconnectedMelodyDTO>? selectedMelodies;

    private Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        authors = await author.GetAuthorsAsync();

        timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                Select();
                StateHasChanged();
            });
        }, null, 0, 300);
    }

    private void SelectAuthor(GetAuthorDTO author)
    {
        selectedAuthor = author;
        melodies = author.Melodies;
    }

    private void Select()
    {
        if (Layout.MainLayout.selectedGenre != null)
            selectedMelodies = melodies?.Where(m => Layout.MainLayout.selectedGenre.Melodies!
                                        .Any(g => g.Id == m.Id)).ToList();
        else
            selectedMelodies = melodies;
    }

    private async Task DeleteAuthor(Guid id) {
        var result = await author.DeleteAuthorAsync(id);

        if (result)
        {
            if (selectedAuthor == authors?.Where(a => a.Id == id).SingleOrDefault())
                SelectAuthor(authors?.FirstOrDefault() ?? new());

            authors = authors?.Where(a => a.Id != id).ToList();
            StateHasChanged();
        }
    }

    private async Task DeleteMelody(Guid id)
    {
        var result = await music.DeleteMelodyAsync(id);

        if (result)
        {
            melodies = melodies!.Where(m => m.Id != id).ToList();
            selectedMelodies = selectedMelodies!.Where(m => m.Id != id).ToList();
            selectedAuthor!.Melodies = melodies;

            StateHasChanged();
        }
    }

    private string GetActiveClass(GetAuthorDTO author) =>
        selectedAuthor != null && selectedAuthor.Id == author.Id ? "active" : "";

    public void Dispose()
    {
        timer.Dispose();
    }
}