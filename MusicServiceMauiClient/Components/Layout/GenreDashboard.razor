@page "/genres-dashboard"

@using MusicServiceMauiClient.DTOs.GenreDTOs;
@using MusicServiceMauiClient.DTOs.AlbumsDTO;
@using Constants;
@using Services;
@using Models;

@inject IGenre genre
@inject IMusic music
@inject IAuthorization authorization

<div class="my-container">
<div class="genres-list">
    <input type="text"  placeholder="Enter genre name" />
    <button class="add-genre" @onclick="AddGenre">Add Genre</button>
    <ul>
        @if (genres != null)
        {
            @foreach (var genre in genres)
            {
                <li @onclick="() => SelectGenre(genre.Albums!)" class="genre-item">
                    <h4>@genre.Name</h4>
                    @if (authorization.DoesRoleExists("Admin"))
                    {
                        <button value="@genre.Id" id="deleteButton" @onclick="(() => DeleteGenre(genre.Id))">Delete</button>
                    }
                </li>
            }
        }
        else
        {
            <li>Loading genres...</li>
        }
    </ul>
</div>

<div class="albums-list">
    @if (selectedGenre != null)
    {
        <h4>Albums in Genre: @selectedGenre.Name</h4>
        <div class="row">
            @if (selectedAlbums != null)
            {
                @foreach (var album in selectedAlbums)
                {
                    <div class="col-md-2">
                        <div class="card">
                            <h4>@album.Title</h4>
                            @if (authorization.DoesRoleExists("Admin"))
                            {
                                //<button value="@album.Id" id="deleteButton" @onclick="(() => DeleteAlbum(album.Id))">Delete</button>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div>Loading albums...</div>
            }
        </div>
    }
    else
    {
        <p>Please select a genre to view its albums.</p>
    }
</div>
</div>
<style>
    .my-container {
        padding-top: 4%;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background-image: linear-gradient( rgba(0, 0, 255, 0.5), rgba(255, 192, 203, 0.5));
        width: 100%;
    }

    .genres-list {
        width: 30%;
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-right: 20px;
    }

    .albums-list {
        width: 65%;
        padding: 15px;
        border-radius: 8px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .genres-list > a.add-genre {
        display: inline-block;
        background-color: #4caf50;
        color: white;
        padding: 10px 15px;
        border-radius: 5px;
        margin-bottom: 10px;
        text-decoration: none;
        transition: background-color 0.3s;
    }

        .genres-list > a.add-genre:hover {
            background-color: #45a049;
        }

    .genre-item {
        padding: 10px;
        border-bottom: 1px solid #ddd;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .genre-item:hover {
            background-color: #f1f1f1;
        }

    .delete-button {
        background-color: red;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
        float: right;
    }

        .delete-button:hover {
            background-color: darkred;
        }

    .row {
        display: flex;
        flex-wrap: wrap;
    }

    .col-md-2 {
        flex: 0 0 20%; 
        padding: 10px;
    }

    .card {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        overflow: hidden;
        text-align: center;
        transition: transform 0.3s;
    }

        .card:hover {
            transform: scale(1.05);
        }

    .card-img {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-bottom: 1px solid #ddd;
    }

    h4 {
        margin: 10px 0;
    }

</style>


@code {
    private GetGenreDTO? selectedGenre;
    private IEnumerable<GetGenreDTO>? genres;
    private IEnumerable<GetUnconnectedAlbumDTO>? selectedAlbums;

    protected override async Task OnInitializedAsync()
    {
        genres = await genre.GetGenresAsync();

        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                
                genres = await genre.GetGenresAsync();
                StateHasChanged();
            });
        }, null, 0, 300);
    }

    private void SelectGenre(IEnumerable<GetUnconnectedAlbumDTO> albumGenres)
    {
        selectedAlbums = albumGenres; 
        selectedGenre = genres?.FirstOrDefault(g => g.Albums == albumGenres); 
    }

    private async Task DeleteGenre(Guid genreId)
    {
        bool success = await genre.DeleteGenreAsync(genreId);
        if (success)
        {
            genres = genres.Where(g => g.Id != genreId);
            StateHasChanged();
        }
    }

    private async Task AddGenre()
    {
        var newGenre = new CreateGenreDTO { Name = "New Genre" };
        var response = await genre.AddGenreAsync(newGenre);

        if (response.IsSuccessStatusCode)
        {
            genres = await genre.GetGenresAsync(); 
            StateHasChanged();
        }
    }

   
}
