@implements IDisposable

@using MusicServiceMauiClient.DTOs.GenreDTOs
@using MusicServiceMauiClient.DTOs.AlbumsDTO
@using Constants
@using Services
@using Models

@inject NavigationManager Navigation
@inject IAuthorization authorization
@inject IGenre genre
@inject IMusic music

<div class="my-container">

    <div class="genres-list">
     
    
        @if (genres != null)
        {
            @foreach (var genre in genres)
            {
                <div class="genre-item">
                    <h4>@genre.Name</h4>
                    <p>@genre.Description</p>
                    <button value="@genre.Id" id="deleteButton" class="delete-button" @onclick="(() => DeleteGenre(genre.Id))">Delete</button>
                </div>
            }
            <div class="genre-item-last">
                <NavLink class="nav-link add-button" href="/add-genre" Match="NavLinkMatch.All"><h1>ADD GENRE</h1></NavLink>
            </div>
        }

    </div>

</div>

<style>
    .my-container {
        padding-top: 5%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        background-image: linear-gradient( rgba(0, 0, 255, 0.5), rgba(255, 192, 203, 0.5));
        width: 100%;
        height: 100%;
    }

    .genres-list {
        width: 100%;
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-right: 20px;
        padding-bottom: 9%;
        overflow-y: scroll;
    }

    .add-button {
        padding: 20px;
        height: 100%;
        background-color: mediumpurple;
        text-align: center;
        font-size: larger;
        border-radius: 20px;
        color: darkblue;
        display: flex;
        justify-content: center;
        align-content: center;
    }

    .genre-item, .genre-item-last {
        padding: 10px;
        margin: 10px;
        border-radius: 20px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border-bottom: 1px solid #ddd;
        background-color: whitesmoke;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .genre-item:hover {
            background-color: #f1f1f1;
        }

    .genre-item-last{
        padding: 0px;
    }

    .delete-button {
        background-color: #007bff;
        color: white;
        border-radius: 20px;
        width: auto;
        padding: 5px 10px;
        cursor: pointer;
        transition: background-color 0.3s;
        float: right;
    }

        .delete-button:hover {
            background-color: #0056b3;
        }

    .row {
        display: flex;
        flex-wrap: wrap;
    }

    .card {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        overflow: hidden;
        text-align: center;
        transition: transform 0.3s;
    }

        .card:hover {
            transform: scale(1.05);
        }

    .card-img {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-bottom: 1px solid #ddd;
    }

    h4 {
        margin: 10px 0;
    }

</style>


@code {

    private GetGenreDTO? selectedGenre;
    private IEnumerable<GetGenreDTO>? genres;

    public static bool Changed { get; set; }

    private Timer timer;

    protected override async Task OnInitializedAsync()
    {
        Changed = true;
        genres = await genre.GetGenresAsync();

        timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                if (Layout.GenreDashboard.Changed)
                {
                    genres = await genre.GetGenresAsync();
                    Layout.GenreDashboard.Changed = false;
                    StateHasChanged();
                }
            });
        }, null, 0, 500);
    }

    private async Task DeleteGenre(Guid id) {
        var result = await genre.DeleteGenreAsync(id);

        if (result)
        {
            Changed = true;
            Navigation.NavigateTo("/dashboard");
        }
    }

    private string GetActiveClass(GetGenreDTO genre) =>
        selectedGenre != null && selectedGenre.Id == genre.Id ? "active" : "";

    public void Dispose()
    {
        timer.Dispose();
    }
}
