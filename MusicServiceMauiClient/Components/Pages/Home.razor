@page "/"

@using Services;
@using Models;
@using Constants;

@inject IMusic music
@inject IJSRuntime js

@if (melodies == null)
{
    <div class="container-fluid">
        <p><em>Loading...</em></p>
    </div>
}
else
{
    <div class="my-container">
        <div class="row">
        @foreach (var melody in melodies)
        {
            <div class="col-md-3">
                <div class="card">
                    <img class="card-img" src="@melody.ImageUrl"/>
                    <h2>@melody.Title</h2>
                    <button value="@melody.Id" id="playButton" @onclick="(() => SetCurrentMelody(melody.Id))">Play</button>
                </div>
            </div>
        }
        </div>
    </div>
}
<style>
    .my-container{
        display: flex;
    }
</style>

@code{
    private IEnumerable<GetMelodyDTO>? melodies;

    protected override async Task OnInitializedAsync()
    {
        melodies = await music.GetMusicAsync();
    }

    public void SetCurrentMelody(Guid id)
    {
        CurrentPlaylist.MelodyList = melodies?.ToList();

        js.InvokeVoidAsync("playMelody", [TunnelUrlData.Url, id]);
        js.InvokeVoidAsync("updateProgress");

        CurrentPlaylist.CurrentMelody = id;
    }
}