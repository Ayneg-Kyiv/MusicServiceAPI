@implements IDisposable

@page "/authors"

@using MusicServiceMauiClient.DTOs.AuthorDTOs;
@using MusicServiceMauiClient.DTOs.MelodyDTOs
@using Constants;
@using Services;
@using Models;

@inject IAuthor author
@inject IJSRuntime js
@inject IMusic music

<div class="my-container">

    <div class="authors-list">
        <ul>
            @if (authors != null)
            {
                @foreach (var author in authors)
                {
                    <li @onclick="() => SelectAuthor(author.Melodies!)" class="author-item">
                        <img class="author-image" src="@author.ImageUrl" alt="^_^"/>
                        <h1>@author.Name</h1>
                    </li>
                }
            }
        </ul>
    </div>

    <div class="songs-list">
        @if (selectedAuthor != null)
        {
                @if (selectedMelodies != null)
                {
                    @foreach (var melody in selectedMelodies)
                    {
                    <div class="music-item">

                        <div class="card">

                            <img class="card-img" src="@melody.ImageUrl" />
                            <div>
                                <h2>@melody.Title</h2>
                            </div>
                            <button value="@melody.Id" id="playButton" class="play-button" @onclick="(() => SetCurrentMelody(melody.Id))">Play</button>

                        </div>

                    </div>
                    }
                }
                else
                {
                    <div>Loading...</div>
                }
        }
        else
        {
            <p>Please select an author to view their melodies.</p>
        }
    </div>

</div>

<style>

    .my-container {
        padding-top: 5%;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background-image: linear-gradient( rgba(0, 0, 255, 0.5), rgba(255, 192, 203, 0.5));
        width: 100%;    
        height: 100vh;
    }

    .authors-list {
        width: 30%;
        background-color: #ffcccb;
        padding: 5px;
        padding-bottom: 9%;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid black;
        margin-left: 10px;
        margin-bottom: 10px;
        height: 100%;
        overflow-y: scroll;
    }

        .authors-list > ul{
            padding: 0px;
        }

    .songs-list {
        width: 65%;
        padding: 5px;
        border-radius: 5px;
        background-color: #add8e6;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid black;
        margin-right: 10px;
        margin-bottom: 10px;
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        background-image: linear-gradient( rgba(0, 0, 255, 0.5), rgba(255, 192, 203, 0.5));
        align-items: flex-start;
        padding-bottom: 9%;
        height: 100%;
        overflow-y: scroll;
    }

    .music-item {
        width: 100%;
        padding-inline: 1%;
        padding-top: 10px;
        height: auto;
        text-overflow: ellipsis;
    }

    .author-item {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-content: space-between;
        padding: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        border-bottom: 1px solid #ddd;
        list-style-type: none; 
    }
        .author-item > img{
            width: 100px;
            height: 100px;
            border-radius: 10px;
        }

        .author-item:hover {
            background-color: #ffb6c1; 
        }

        .author-item.active {
            background-color: #ff69b4; 
            color: white;
        }

    .play-button {
        background-color: #4caf50; 
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .play-button:hover {
            background-color: #45a049; 
        }

        .play-button:focus {
            outline: none;
        }

    .card {
        margin: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        overflow: hidden;
        text-align: center;
    }

        .card > div {
            height: 60px;
            text-overflow: ellipsis;
        }

    .card-img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    h2 {
        font-size: 1.2rem;
        margin: 10px 0;
    }

</style>

@code {

    private GetAuthorDTO? selectedAuthor;
    private IEnumerable<GetAuthorDTO>? authors;
    private IEnumerable<GetUnconnectedMelodyDTO>? melodies;
    private IEnumerable<GetUnconnectedMelodyDTO>? selectedMelodies;

    private Timer timer;

    protected override async Task OnInitializedAsync()
    {
        authors = await author.GetAuthorsAsync();

        timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                await Select();
                StateHasChanged();
            });
        }, null, 0, 300);
    }

    private void SelectAuthor(IEnumerable<GetUnconnectedMelodyDTO> authorMelodies)
    {
        melodies = authorMelodies;

        selectedAuthor = authors?.FirstOrDefault(a => a.Melodies == authorMelodies);
    }

    private async Task Select()
    {
        if (Layout.MainLayout.selectedGenre != null)
        {
            selectedMelodies = melodies?.Where(m => Layout.MainLayout.selectedGenre.Melodies!
                                                    .Any(g => g.Id == m.Id)).ToList();
        }
        else
            selectedMelodies = melodies;
    }

    private void SetCurrentMelody(Guid id)
    {
        js.InvokeVoidAsync("setPlaylist", [selectedMelodies, id]);

        var selected = selectedMelodies?.Where(m => m.Id == id).SingleOrDefault();

        if (selected != null)
        {
            var melody = new GetMelodyDTO()
            {
                Id = selected.Id,
                Title = selected.Title,
                Duration = selected.Duration,
                ImageUrl = selected.ImageUrl,
                Author = new() { Name = selectedAuthor?.Name ?? "" }
            };

            js.InvokeVoidAsync("playMelody", [TunnelUrlData.Url, melody]);
        }

    }

    private string GetActiveClass(GetAuthorDTO author)
    {
        return selectedAuthor != null && selectedAuthor.Id == author.Id ? "active" : "";
    }

    public void Dispose()
    {
        timer.Dispose();
    }
}