@page "/authors"

@using MusicServiceMauiClient.DTOs.MelodyDTOs
@using Services;
@using Models;
@using MusicServiceMauiClient.DTOs.AuthorDTOs;


@using Constants;

@inject IAuthor author
@inject IMusic music
@inject IJSRuntime js

<div class="my-container">

    <div class="authors-list">
        <ul>
            @if (authors != null)
            {
                @foreach (var author in authors)
                {
                    <li @onclick="() => SelectAuthor(author.Melodies!)" class="author-item">
                        @author.Id
                    </li>
                }
            }
        </ul>
    </div>


    <div class="songs-list">
        @if (selectedAuthor != null)
        {
            <h4>@selectedAuthor.Name Melodies</h4>
            <ul>
                @if (melodies != null)
                {
                    @foreach (var melody in melodies)
                    {
                        <li>@melody.Title</li>
                        <button value="@melody.Id" id="playButton" @onclick="(() => SetCurrentMelody(melody.Id))">Play</button>
                    }
                }
                else
                {
                    <li>Loading...</li>
                }
            </ul>
        }
        else
        {
            <p>Please select an author to view their melodies.</p>
        }
    </div>
</div>

<style>
    .my-container {
        padding-top: 4%;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background-image: linear-gradient( rgba(0, 0, 255, 0.5), rgba(255, 192, 203, 0.5));
        width: 100%;        
    }

    .authors-list {
        width: 30%;
        background-color: #ffcccb; 
        padding: 5px;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid black;
        margin-left: 10px;
        margin-bottom: 10px;
    }

    .songs-list {
        width: 65%;
        padding: 5px;
        border-radius: 5px;
        background-color: #add8e6;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid black;
        margin-right: 10px;
        margin-bottom: 10px;
    }

    .author-item {
        padding: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        border-bottom: 1px solid #ddd;
        list-style-type: none; 
    }

        .author-item:hover {
            background-color: #ffb6c1; 
        }

        .author-item.active {
            background-color: #ff69b4; 
            color: white;
        }

    .songs-list ul {
        list-style-type: none;
        padding: 0;
    }

        .songs-list ul li {
            padding: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

    button {
        background-color: #4caf50; 
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        button:hover {
            background-color: #45a049; 
        }

        button:focus {
            outline: none;
        }
</style>

@code {

    private IEnumerable<GetAuthorDTO>? authors;
    private GetAuthorDTO? selectedAuthor;
    private IEnumerable<GetUnconnectedMelodyDTO>? melodies;


    protected override async Task OnInitializedAsync()
    {
        authors = await author.GetAuthorsAsync();

    }

    private void SelectAuthor(IEnumerable<GetUnconnectedMelodyDTO> authorMelodies)
    {
        melodies = authorMelodies;

        selectedAuthor = authors?.FirstOrDefault(a => a.Melodies == authorMelodies);
    }



    private void SetCurrentMelody(Guid id)
    {
        js.InvokeVoidAsync("setPlaylist", [melodies, id]);
        js.InvokeVoidAsync("playMelody", [TunnelUrlData.Url, melodies?.Where(m => m.Id == id).SingleOrDefault()]);
    }


    private string GetActiveClass(GetAuthorDTO author)
    {
        return selectedAuthor != null && selectedAuthor.Id == author.Id ? "active" : "";
    }
}